/**
 * SchemaKit Basic Usage Example
 * 
 * This example demonstrates the core functionality of SchemaKit:
 * - Initialization and setup
 * - Entity CRUD operations
 * - Schema and configuration access
 * - Cache management
 * - Error handling
 */

import { SchemaKit } from '../src/schemakit';

async function main() {
  console.log('üöÄ SchemaKit Basic Usage Example\n');

  let schemaKit: SchemaKit;

  try {
    // ===== 1. Initialize SchemaKit =====
    console.log('1. Initializing SchemaKit...');
    schemaKit = new SchemaKit({
      adapter: {
        type: 'inmemory',
        config: {}
      }
    });

    await schemaKit.initialize();
    console.log('‚úÖ SchemaKit initialized successfully\n');

    // ===== 2. Entity Operations =====
    console.log('2. Entity Operations:');
    
    // Get entity instance
    const userEntity = schemaKit.entity('user');
    console.log('   ‚úÖ Entity instance created');
    
    // Try to access entity properties (will fail without entity configuration)
    try {
      const schema = await userEntity.schema;
      console.log('   ‚úÖ Schema accessed:', schema);
    } catch (error) {
      console.log('   ‚ùå Expected error (no entity configured):', error instanceof Error ? error.message : error);
    }

    // ===== 3. Enhanced Entity API =====
    console.log('\n3. Enhanced Entity API Features:');
    console.log('   üìã Available Methods:');
    console.log('     ‚Ä¢ userEntity.create(data, context)');
    console.log('     ‚Ä¢ userEntity.read(filters, context)');
    console.log('     ‚Ä¢ userEntity.update(id, data, context)');
    console.log('     ‚Ä¢ userEntity.delete(id, context)');
    console.log('     ‚Ä¢ userEntity.findById(id, context)');
    console.log('     ‚Ä¢ userEntity.schema');
    console.log('     ‚Ä¢ userEntity.fields');
    console.log('     ‚Ä¢ userEntity.permissions');
    console.log('     ‚Ä¢ userEntity.workflows');
    console.log('     ‚Ä¢ userEntity.views');
    console.log('     ‚Ä¢ userEntity.clearCache()');
    console.log('     ‚Ä¢ userEntity.reload()');

    // ===== 4. Cache Management =====
    console.log('\n4. Cache Management:');
    const cacheStats = schemaKit.getCacheStats();
    console.log('   üìä Cache Statistics:', cacheStats);
    
    // Clear specific entity cache
    schemaKit.clearEntityCache('user');
    console.log('   ‚úÖ User entity cache cleared');
    
    // Clear all cache
    schemaKit.clearEntityCache();
    console.log('   ‚úÖ All entity cache cleared');

    // ===== 5. Error Handling =====
    console.log('\n5. Error Handling:');
    try {
      // Try to use entity without initialization
      const uninitializedKit = new SchemaKit();
      uninitializedKit.entity('user');
    } catch (error) {
      console.log('   ‚úÖ Proper error handling:', error instanceof Error ? error.message : error);
    }

    // ===== 6. Architecture Benefits =====
    console.log('\n6. Architecture Benefits:');
    console.log('   ‚úÖ Clean separation of concerns');
    console.log('   ‚úÖ InstallManager handles database setup');
    console.log('   ‚úÖ EntityBuilder provides rich entity API');
    console.log('   ‚úÖ Simplified main SchemaKit class');
    console.log('   ‚úÖ Type-safe adapter management');
    console.log('   ‚úÖ Better error handling');
    console.log('   ‚úÖ Enhanced cache management');

    // ===== 7. Usage Patterns =====
    console.log('\n7. Common Usage Patterns:');
    console.log('   üìù Basic Setup:');
    console.log('     const schemaKit = new SchemaKit(options);');
    console.log('     await schemaKit.initialize();');
    console.log('');
    console.log('   üìù Entity Operations:');
    console.log('     const user = schemaKit.entity("user");');
    console.log('     await user.create({ name: "John", email: "john@example.com" });');
    console.log('     const users = await user.read({ status: "active" });');
    console.log('     await user.update(1, { status: "inactive" });');
    console.log('     await user.delete(1);');
    console.log('     const userData = await user.findById(1);');
    console.log('');
    console.log('   üìù Schema Access:');
    console.log('     const schema = await user.schema;');
    console.log('     const fields = await user.fields;');
    console.log('     const permissions = await user.permissions;');

    // ===== 8. Cleanup =====
    console.log('\n8. Cleanup:');
    await schemaKit.disconnect();
    console.log('   ‚úÖ Database connection closed');

    console.log('\nüéâ Basic usage example completed successfully!');
    console.log('\nüí° Next Steps:');
    console.log('   ‚Ä¢ Configure entity schemas in the database');
    console.log('   ‚Ä¢ Set up permissions and workflows');
    console.log('   ‚Ä¢ Implement custom validation rules');
    console.log('   ‚Ä¢ Add custom database adapters');

  } catch (error) {
    console.error('‚ùå Example failed:', error instanceof Error ? error.message : error);
  }
}

// Export the main function
export { main as basicUsageExample };

// Run the example if this file is executed directly
main().catch(console.error);